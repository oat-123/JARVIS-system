"use client"

import { useState, useEffect } from "react"
import { saveModuleState, loadModuleState, clearModuleState } from "@/lib/state-persistence"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ExternalLink } from "lucide-react"

interface ReleaseReportProps {
  onBack: () => void
  sheetName: string
}

export function ReleaseReport({ onBack }: ReleaseReportProps) {
  const MODULE_NAME = 'release-report'
  const [isStateLoaded, setIsStateLoaded] = useState(false)
  
  const [startDate, setStartDate] = useState(new Date().toISOString().split("T")[0])
  const [endDate, setEndDate] = useState(new Date().toISOString().split("T")[0])
  const [report, setReport] = useState("")

  const defaults = { 5: 67, 4: 101, 3: 94, 2: 85 }
  const categories = ["‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", "‡∏Å‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì", "‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]

  const [data, setData] = useState<Record<number, Record<string, number>>>({
    5: Object.fromEntries(categories.map((cat) => [cat, 0])),
    4: Object.fromEntries(categories.map((cat) => [cat, 0])),
    3: Object.fromEntries(categories.map((cat) => [cat, 0])),
    2: Object.fromEntries(categories.map((cat) => [cat, 0])),
  })

  const updateData = (year: number, category: string, value: number) => {
    setData((prev) => ({
      ...prev,
      [year]: {
        ...prev[year],
        [category]: value,
      },
    }))
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î state
  const saveCurrentState = () => {
    if (!isStateLoaded) return // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î state ‡πÄ‡∏™‡∏£‡πá‡∏à
    console.log('üíæ Saving release-report state:', { startDate, endDate, report: report.substring(0, 50) + '...', data })
    saveModuleState(MODULE_NAME, { startDate, endDate, report, data })
  }

  const loadSavedState = () => {
    const savedState = loadModuleState(MODULE_NAME)
    if (savedState) {
      console.log('üîÑ Loading release-report state:', savedState)
      if (savedState.startDate) setStartDate(savedState.startDate)
      if (savedState.endDate) setEndDate(savedState.endDate)
      if (savedState.report) setReport(savedState.report)
      if (savedState.data) setData(savedState.data)
      console.log('‚úÖ Release-report state loaded successfully')
    } else {
      console.log('‚ÑπÔ∏è No saved release-report state found')
    }
    setIsStateLoaded(true)
  }

  // useEffect hooks
  useEffect(() => {
    // ‡πÇ‡∏´‡∏•‡∏î state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
    loadSavedState()
  }, [])

  useEffect(() => {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å state ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    if (isStateLoaded) {
      saveCurrentState()
    }
  }, [startDate, endDate, report, data, isStateLoaded])

  const generateReport = () => {
    const lines: string[] = []
    const startStr = new Date(startDate).toLocaleDateString("th-TH", { day: "numeric", month: "short" })
    const endStr = new Date(endDate).toLocaleDateString("th-TH", { day: "numeric", month: "short", year: "2-digit" })

    lines.push(
      `‡∏û‡∏±‡∏ô.4 ‡∏Å‡∏£‡∏° ‡∏ô‡∏ô‡∏£.‡∏£‡∏≠. ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏¢‡∏≠‡∏î ‡∏ô‡∏ô‡∏£. ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô, ‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startStr} - ${endStr} ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ`,
    )
    lines.push("")

    // ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°
    for (const y of [5, 4, 3, 2]) {
      lines.push(`‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà ${y} ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏° ${defaults[y]} ‡∏ô‡∏≤‡∏¢`)
    }
    lines.push("")

    // 1. ‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ö‡πâ‡∏≤‡∏ô
    lines.push("1.‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô")
    let totalHome = 0
    for (const y of [5, 4, 3, 2]) {
      const sumOthers = Object.values(data[y]).reduce((sum, val) => sum + (val || 0), 0)
      const val = defaults[y] - sumOthers
      totalHome += val
      lines.push(`   -‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà ${y} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${val} ‡∏ô‡∏≤‡∏¢`)
    }
    lines.push(`   -‡∏£‡∏ß‡∏° ${totalHome} ‡∏ô‡∏≤‡∏¢`)
    lines.push("")

    // 2-8. ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    const categoryMap = ["‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", "‡∏Å‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    categoryMap.forEach((cat, index) => {
      lines.push(`${index + 2}.${cat}`)
      let total = 0
      for (const y of [5, 4, 3, 2]) {
        const val = data[y][cat] || 0
        total += val
        const showVal = val !== 0 ? val.toString() : "-"
        lines.push(`   -‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà ${y} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${showVal} ‡∏ô‡∏≤‡∏¢`)
      }
      const showTotal = total !== 0 ? total.toString() : "-"
      lines.push(`   -‡∏£‡∏ß‡∏° ${showTotal} ‡∏ô‡∏≤‡∏¢`)
      lines.push("")
    })

    lines.push("‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏£‡∏≤‡∏ö")

    setReport(lines.join("\n"))
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-8">
      <div className="max-w-6xl mx-auto">
        <Button
          onClick={onBack}
          variant="outline"
          className="mb-8 text-white border-white hover:bg-white hover:text-black bg-transparent"
        >
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        </Button>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-2xl text-center text-white">üìù ‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="start-date" className="text-white">
                  ‡∏ß‡∏±‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢
                </Label>
                <Input
                  id="start-date"
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="end-date" className="text-white">
                  ‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏£.
                </Label>
                <Input
                  id="end-date"
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>

            {/* ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ */}
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-white">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ</h3>

              {[5, 4, 3, 2].map((year) => (
                <Card key={year} className="bg-slate-700/50 border-slate-600">
                  <CardHeader>
                    <CardTitle className="text-white text-lg">
                      ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {year} (‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏° {defaults[year]} ‡∏ô‡∏≤‡∏¢)
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                      {categories.map((category) => (
                        <div key={category} className="space-y-2">
                          <Label className="text-white text-sm font-medium">{category}</Label>
                          <Input
                            type="number"
                            min="0"
                            value={data[year][category] || 0}
                            onChange={(e) => updateData(year, category, Number.parseInt(e.target.value) || 0)}
                            className="bg-slate-600 border-slate-500 text-white"
                            placeholder="0"
                          />
                        </div>
                      ))}
                    </div>

                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */}
                    <div className="mt-4 p-3 bg-slate-600/50 rounded-lg">
                      <div className="text-sm text-slate-300">
                        ‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏õ: {Object.values(data[year]).reduce((sum, val) => sum + (val || 0), 0)} ‡∏ô‡∏≤‡∏¢
                      </div>
                      <div className="text-sm font-semibold text-green-400">
                        ‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ö‡πâ‡∏≤‡∏ô:{" "}
                        {defaults[year] - Object.values(data[year]).reduce((sum, val) => sum + (val || 0), 0)} ‡∏ô‡∏≤‡∏¢
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô */}
            <div className="flex gap-4">
              <Button
                onClick={generateReport}
                className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"
              >
                üìò ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
              </Button>
              <Button
                asChild
                variant="outline"
                className="border-green-600 text-green-400 hover:bg-green-600 hover:text-white bg-transparent"
              >
                <a
                  href="https://docs.google.com/spreadsheets/d/1_kKUegxtwwd3ce3EduPqRoPpgAF1_IcecA1ri9Pfxz0/edit?gid=351113778#gid=351113778"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <ExternalLink className="mr-2 h-4 w-4" />üìó ‡∏ó‡∏≥‡πÑ‡∏ü‡∏•‡πå
                </a>
              </Button>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô */}
            {report && (
              <Card className="bg-slate-700/50 border-slate-600">
                <CardHeader>
                  <CardTitle className="text-white">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î</CardTitle>
                </CardHeader>
                <CardContent>
                  <Textarea
                    value={report}
                    readOnly
                    className="bg-slate-800 border-slate-600 text-white h-96 font-mono text-sm resize-none"
                  />
                </CardContent>
              </Card>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
