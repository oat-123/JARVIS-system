import { NextRequest, NextResponse } from "next/server"
import { getSheetsService } from "@/lib/google-auth"

// Spreadsheet ID for 433 data (from user)
const SPREADSHEET_ID_433 = "1E0cu1J33gpRA-OHyNYL7tND30OoHBX4YpeoQ7JFUOaQ"

function safeParseDateCell(cell: string | undefined): string | null {
  if (!cell) return null
  // Cell may contain date plus extra text, e.g. "‡πí‡πì ‡∏™.‡∏Ñ. ‡πñ‡πò ‡∏†‡∏π‡∏ò‡∏£"
  // Extract up to first non-date word by stopping at any non-Thai/space/dot/digit characters sequence after the date
  // For simplicity, take the first 20 characters and try to match Thai date-like pattern
  const trimmed = cell.toString().trim()
  // Basic heuristic: keep tokens that contain Thai digits or Thai month abbreviations or digits/./space
  const tokens = trimmed.split(/\s+/)
  const kept: string[] = []
  for (const t of tokens) {
    // allow Thai characters, digits, dots, short Latin month-like words (rare)
    if (/^[\u0E00-\u0E7F0-9.\/:-]+$/.test(t) || /[\u0E00-\u0E7F]/.test(t)) {
      kept.push(t)
    } else {
      break
    }
  }
  return kept.length ? kept.join(' ') : trimmed
}

export async function GET(request: NextRequest) {
  try {
    const sheets = await getSheetsService()

    // Try to read main sheet named '‡∏ô‡∏ô‡∏£.' or first sheet
    const spreadsheet = await sheets.spreadsheets.get({ spreadsheetId: SPREADSHEET_ID_433 })
    const sheetTitle = spreadsheet.data.sheets?.[0]?.properties?.title || '‡∏ô‡∏ô‡∏£.'

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID_433,
      // Extend range to include AA ‡πÅ‡∏•‡∏∞ AB (‡∏ô.‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏°, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
      range: `${sheetTitle}!A:AB`,
    })

    const values = response.data.values || []
    if (values.length === 0) {
      return NextResponse.json({ success: true, data: [], message: 'empty' })
    }

    const headers = values[0].map((h: any) => (h || '').toString().trim())

    // Find column indexes by header names (improved to handle column insertions)
    const idxOf = (name: string) => headers.findIndex(h => h.includes(name))
    
    // Main columns - use header names instead of hard-coded positions
    const idxOrder = idxOf('‡∏•‡∏≥‡∏î‡∏±‡∏ö') >= 0 ? idxOf('‡∏•‡∏≥‡∏î‡∏±‡∏ö') : 0
    const idxRank = idxOf('‡∏¢‡∏®') >= 0 ? idxOf('‡∏¢‡∏®') : 1
    const idxFirstName = idxOf('‡∏ä‡∏∑‡πà‡∏≠') >= 0 ? idxOf('‡∏ä‡∏∑‡πà‡∏≠') : 2
    const idxLastName = idxOf('‡∏™‡∏Å‡∏∏‡∏•') >= 0 ? idxOf('‡∏™‡∏Å‡∏∏‡∏•') : 3
    const idxYear = idxOf('‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà') >= 0 ? idxOf('‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà') : 4
    const idxClass = idxOf('‡∏ï‡∏≠‡∏ô') >= 0 ? idxOf('‡∏ï‡∏≠‡∏ô') : 5
    const idxPosition = idxOf('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á') >= 0 ? idxOf('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á') : 6
    const idxUnit = idxOf('‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î') >= 0 ? idxOf('‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î') : 7
    const idxPhone = idxOf('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') >= 0 ? idxOf('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') : 8
    
    // Additional columns
    const idxReport = idxOf('‡∏ñ‡∏ß‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô')
    const idxDutyOfficer = idxOf('‡∏ô.‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏°')
    const idxDate = idxOf('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
    
    // Dynamic detection of 433 columns (433 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà X)
    const idx433Cols: number[] = []
    headers.forEach((header, index) => {
      if (header && header.toString().trim().match(/^433\s*‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà\s*\d+$/)) {
        idx433Cols.push(index)
      }
    })
    
    // Dynamic detection of admin columns (‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà X)
    const idxAdminCols: number[] = []
    headers.forEach((header, index) => {
      if (header && header.toString().trim().match(/^‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£\s*‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà\s*\d+$/)) {
        idxAdminCols.push(index)
      }
    })
    
    // Extra columns we want to surface into each person row
    const idxGrade = idxOf('‡∏Ñ‡∏±‡∏î‡πÄ‡∏Å‡∏£‡∏î')
    const idxAdminField = idxOf('‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏ù‡∏≠.') >= 0 ? idxOf('‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏ù‡∏≠.') : idxOf('‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£')
    const idxTua = idxOf('‡∏ï‡∏±‡∏ß‡∏ä‡∏ô')
    const idxHeight = idxOf('‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
    const idxSport = idxOf('‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤')
    const idxOtherMission = idxOf('‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô ‡πÜ')
    const idxOverseasWork = idxOf('‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®')
    const idxMedicalCert = idxOf('‡πÄ‡∏à‡πá‡∏ö (‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå)')
    const idxNote = idxOf('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏')

    const people: any[] = []
    for (let i = 1; i < values.length; i++) {
      const row = values[i]
      const get = (j: number) => (j >= 0 && j < row.length ? row[j] : '')
      const person = {
        ‡∏•‡∏≥‡∏î‡∏±‡∏ö: get(idxOrder),
        ‡∏¢‡∏®: get(idxRank),
        ‡∏ä‡∏∑‡πà‡∏≠: get(idxFirstName),
        ‡∏™‡∏Å‡∏∏‡∏•: get(idxLastName),
        ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà: get(idxYear),
        ‡∏ï‡∏≠‡∏ô: get(idxClass),
        ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: get(idxPosition),
        ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î: get(idxUnit),
        ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: get(idxPhone),
        ‡∏Ñ‡∏±‡∏î‡πÄ‡∏Å‡∏£‡∏î: get(idxGrade),
        "‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏ù‡∏≠.": get(idxAdminField),
        ‡∏ï‡∏±‡∏ß‡∏ä‡∏ô: get(idxTua),
        ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á: get(idxHeight),
        ‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤: get(idxSport),
        "‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∑‡πà‡∏ô ‡πÜ": get(idxOtherMission),
        "‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®": get(idxOverseasWork),
        "‡πÄ‡∏à‡πá‡∏ö (‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå)": get(idxMedicalCert),
        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: get(idxNote),
        ‡∏ñ‡∏ß‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: get(idxReport),
        "‡∏ô.‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏°": get(idxDutyOfficer),
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": get(idxDate),
        _433_dates: idx433Cols.map(c => safeParseDateCell(get(c))),
        _admin_dates: idxAdminCols.map(c => safeParseDateCell(get(c))),
        // Store individual 433 columns for detailed view
        _433_columns: idx433Cols.map((c, index) => ({
          column: headers[c] || `433 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${index + 1}`,
          value: get(c)
        })),
        // Store individual admin columns for detailed view
        _admin_columns: idxAdminCols.map((c, index) => ({
          column: headers[c] || `‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${index + 1}`,
          value: get(c)
        }))
      }
      people.push(person)
    }

    // Aggregations for pie chart
    let countReport = 0
    let count433 = 0
    let countAdmin = 0
    let countNever = 0

    // Also compute report counts per person
    const reportCounts: Record<string, number> = {}

    people.forEach(p => {
      const reportCell = (p.‡∏ñ‡∏ß‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô || '').toString()
      const hasReport = !!(reportCell && reportCell.toString().trim())
      const has433 = p._433_dates.some((d: any) => d && d.toString().trim())
      const hasAdmin = p._admin_dates.some((d: any) => d && d.toString().trim())

      if (hasReport) countReport++
      if (has433) count433++
      if (hasAdmin) countAdmin++
      if (!hasReport && !has433 && !hasAdmin) countNever++

      // For reportCounts, check ‡∏ñ‡∏ß‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô column may contain codes like HMSV, 904, 919 separated by commas or spaces
      if (hasReport) {
        const tokens = reportCell.toString().split(/[\s,;\/]+/).map((t: string) => t.trim()).filter(Boolean)
        tokens.forEach((tok: string) => {
          reportCounts[tok] = (reportCounts[tok] || 0) + 1
        })
      }
    })

    // Turn reportCounts into sorted array
    const topReporters = Object.entries(reportCounts).map(([k, v]) => ({ name: k, count: v })).sort((a, b) => b.count - a.count)

    // For top people (by number of report dates), compute counts per person by counting non-empty report date tokens in ‡∏ñ‡∏ß‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô + 433 + admin depending on metric
    const personStats = people.map((p: any) => {
      const reportDates = (p.‡∏ñ‡∏ß‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô || '').toString() ? 1 : 0
      const num433 = p._433_dates.filter((d: any) => d && d.toString().trim()).length
      const numAdmin = p._admin_dates.filter((d: any) => d && d.toString().trim()).length
      return {
        fullName: `${p.‡∏¢‡∏® || ''} ${p.‡∏ä‡∏∑‡πà‡∏≠ || ''} ${p.‡∏™‡∏Å‡∏∏‡∏• || ''}`.trim(),
        report: reportDates,
        _433: num433,
        admin: numAdmin,
      }
    })

    // Top 5 tables
    const topByReportPerson = [...personStats].sort((a, b) => b.report - a.report).slice(0, 5)
    const topBy433Person = [...personStats].sort((a, b) => b._433 - a._433).slice(0, 5)
    const topByAdminPerson = [...personStats].sort((a, b) => b.admin - a.admin).slice(0, 5)

    const responseData = {
      totals: { report: countReport, duty433: count433, admin: countAdmin, never: countNever },
      topReporters,
      topByReportPerson,
      topBy433Person,
      topByAdminPerson,
      people,
      // Metadata about detected columns
      metadata: {
        detected_433_columns: idx433Cols.map(c => headers[c] || `Column ${c}`),
        detected_admin_columns: idxAdminCols.map(c => headers[c] || `Column ${c}`),
        total_433_columns: idx433Cols.length,
        total_admin_columns: idxAdminCols.length,
        all_headers: headers
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    console.log('üöÄ API 433 - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ:', {
      timestamp: new Date().toISOString(),
      summary: {
        totalPeople: people.length,
        detected433Columns: idx433Cols.length,
        detectedAdminColumns: idxAdminCols.length,
        columnNames: {
          '433_columns': idx433Cols.map(c => headers[c] || `Column ${c}`),
          'admin_columns': idxAdminCols.map(c => headers[c] || `Column ${c}`),
        },
        totals: responseData.totals,
        samplePerson: people[0] ? {
          name: `${people[0].‡∏¢‡∏®} ${people[0].‡∏ä‡∏∑‡πà‡∏≠} ${people[0].‡∏™‡∏Å‡∏∏‡∏•}`,
          has433Data: people[0]._433_columns?.length > 0,
          hasAdminData: people[0]._admin_columns?.length > 0,
        } : null
      }
    })

    return NextResponse.json({
      success: true,
      data: responseData
    })
  } catch (error) {
    console.error('Error in 433 API:', error)
    return NextResponse.json({ success: false, error: error instanceof Error ? error.message : 'unknown' }, { status: 500 })
  }
}
